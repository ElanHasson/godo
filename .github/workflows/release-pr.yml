name: Generate CHANGELOG.md

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release (e.g. 1.8.0)"
        required: true

env:
  VERSION_PREFIX: release

jobs:
  release-pr:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      
    steps:
      - name: Validate version is SemVer
        run: |
          version="${{ github.event.inputs.version }}"
          if [[ ! "$version" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "‚ùå Invalid version: '$version'. Must match semantic versioning (e.g. 1.2.3)"
            exit 1
          fi
      - name: Check if release already exists
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          version="${{ github.event.inputs.version }}"
          owner_repo="${{ github.repository }}"
          
          echo "Checking for existing release: $version"

          if [[ "$version" != v* ]]; then
            vversion="v$version"
            if gh release view "$vversion" --repo "$owner_repo" > /dev/null 2>&1; then
              echo "‚ùå Release '$vversion' already exists."
              exit 1
            fi
          fi

          echo "‚úÖ No existing release found for '$version'"


      - name: Checkout repository
        uses: actions/checkout@v4
        with:

          clean: true
          fetch-depth: 0


      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"
          cache: true

      - name: Configure git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"


      - name: Create release branch
        run: |
          branch="${VERSION_PREFIX}/${{ github.event.inputs.version }}"
          git checkout -b "$branch"

      - name: Install github-changelog-generator@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          go install github.com/digitalocean/github-changelog-generator@latest
      
      - name: Update libraryVersion in godo.go
        run: |
          version="${{ github.event.inputs.version }}"
          sed -i -E 's/^(\s*libraryVersion = ")[^"]+(")/\11.161.0\2/' godo.go

      - name: Generate CHANGELOG.md and insert header if missing
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          version="${{ github.event.inputs.version }}"
          date=$(date +%F)
          header="## [${version}] - ${date}"

          # Generate CHANGELOG from PRs (this writes to CHANGELOG.md file)
          echo "üîÑ Running github-changelog-generator..."
          changelog="$(github-changelog-generator -org '${{ github.repository_owner }}' -repo '${{ github.event.repository.name }}')"          
          
          # Debug: Check what we captured
          echo "üìä Changelog variable length: ${#changelog}"
          echo "üìù First 500 chars of changelog:"
          echo "$changelog" | head -c 500
          echo ""
          echo "üìÑ CHANGELOG.md file status:"
          ls -la CHANGELOG.md 2>/dev/null || echo "CHANGELOG.md does not exist"
          
          # Check if version header already exists (with any date)
          version_pattern="## \[${version}\]"
          if grep -q "$version_pattern" CHANGELOG.md; then
            echo "‚úÖ CHANGELOG contains section for ${version}, updating date..."
            
            # Update the existing header with current date
            sed -i -E "s/^## \[${version}\] - [0-9]{4}-[0-9]{2}-[0-9]{2}/## [${version}] - ${date}/" CHANGELOG.md
          else
            echo "‚ÑπÔ∏è CHANGELOG does not contain section for ${version}, inserting header manually..."
            
            # Insert header after "# Change Log" title
            awk -v section="$header\n" '
              NR == 1 { print; next }
              /^# Change Log/ && !inserted {
                print; print ""; print section; inserted=1; next
              }
              { print }
            ' CHANGELOG.md > NEW_CHANGELOG.md
            
            mv NEW_CHANGELOG.md CHANGELOG.md
          fi

          # Extract unreleased entries from the captured changelog output
          echo "üîç Extracting unreleased entries..."
          unreleased_entries=$(echo "$changelog" | awk '
            /^## \[Unreleased\]/ { found=1; next }
            /^## \[/ && found { exit }
            found && NF > 0 { print }
          ')
          
          # Debug: Show what we found
          echo "üìã Unreleased entries length: ${#unreleased_entries}"
          echo "üìã Unreleased entries content:"
          echo "$unreleased_entries"
          echo "--- End of unreleased entries ---"

          # If we have unreleased entries, insert them under the version header
          if [ -n "$unreleased_entries" ]; then
            echo "‚ÑπÔ∏è Inserting changelog entries under ${header}..."
            
            # Insert the changelog entries right after the version header
            awk -v header="$header" -v entries="$unreleased_entries" '
              $0 == header {
                print; print ""; print entries; next
              }
              { print }
            ' CHANGELOG.md > NEW_CHANGELOG.md
            
            mv NEW_CHANGELOG.md CHANGELOG.md
          else
            echo "‚ö†Ô∏è No unreleased entries found in generated changelog"
            echo "üîç Let's check what sections exist in the captured output:"
            echo "$changelog" | grep "^## \[" || echo "No version headers found in changelog output"
          fi
          
          echo "üìä Final git status:"
          git status --porcelain
          echo "üìä Files to be added:"
          git diff --cached --name-only || echo "No files staged"

          git add CHANGELOG.md godo.go
          

      - name: Commit changes (only if needed)
        run: |
          if git diff --cached --quiet; then
            echo "No changes to commit."
            exit 1
          fi
          git commit -m "Release ${{ github.event.inputs.version }}: update CHANGELOG and libraryVersion"

      - name: Push branch
        run: |
          branch="${VERSION_PREFIX}/${{ github.event.inputs.version }}"
          git push origin "$branch"

      - name: Create Pull Request with gh CLI
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          version="${{ github.event.inputs.version }}"
          branch="${VERSION_PREFIX}/${version}"

          changelog="$(github-changelog-generator -org '${{ github.repository_owner }}' -repo '${{ github.event.repository.name }}')"
          changelog=$(echo "$changelog" | sed '/^\s*$/d')

          gh pr create \
            --base main \
            --head "$branch" \
            --title "Release ${version} (${{ github.sha }})" \
            --body "This PR updates the CHANGELOG and libraryVersion for \`${version}\`.\n\n### Changelog:\n${changelog}"
